# Development Docker Compose Configuration
# EMG C3D Analyzer - Hot Reload Development Environment
# Usage: docker-compose -f docker-compose.dev.yml up

services:
  # Backend API Service - Development Hot Reload
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
      target: development
    container_name: emg-backend-dev-hot
    environment:
      # Database configuration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      
      # Redis cache configuration
      - REDIS_URL=redis://redis:6379/0
      - REDIS_CACHE_TTL_SECONDS=3600
      - REDIS_MAX_CACHE_SIZE_MB=100
      - REDIS_KEY_PREFIX=emg_analysis
      
      # Application settings
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      
      # File storage
      - DATA_BASE_DIR=/app/data
      - UPLOAD_DIR=/app/data/uploads
      - RESULTS_DIR=/app/data/results
      - CACHE_DIR=/app/data/cache
      
      # CORS settings for development
      - ALLOWED_ORIGINS=http://localhost:3000,http://frontend:8080
    volumes:
      # Mount source code for hot reload (Poetry-compatible)
      - ./backend:/app
      # Exclude virtual environment and cache from host mount
      - backend_venv:/app/.venv
      - backend_poetry_cache:/tmp/poetry_cache
      # Data directories as named volumes  
      - emg_data:/app/data
      - backend_logs:/app/logs
    ports:
      - "8080:8080"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - emg-network
    restart: unless-stopped
    # Hot reload command using Poetry (matches Dockerfile.dev)
    command: poetry run uvicorn main:app --host 0.0.0.0 --port 8080 --reload --log-level debug
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend Web Application - Development Hot Reload
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile.dev
      target: development
    container_name: emg-frontend-dev-hot
    environment:
      # Backend API URL
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_ENVIRONMENT=development
      
      # Supabase configuration (for client-side)
      - REACT_APP_SUPABASE_URL=${SUPABASE_URL}
      - REACT_APP_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      
      # Vite configuration
      - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
      
      # Development settings
      - CHOKIDAR_USEPOLLING=true  # Enable polling for file changes in Docker
    volumes:
      # Mount only source code for hot reload (not the entire /app)
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public:ro
      - ./frontend/package.json:/app/package.json:ro
      - ./frontend/package-lock.json:/app/package-lock.json:ro
      - ./frontend/vite.config.ts:/app/vite.config.ts:ro
      - ./frontend/tsconfig.json:/app/tsconfig.json:ro
      - ./frontend/tailwind.config.js:/app/tailwind.config.js:ro
      - ./frontend/postcss.config.js:/app/postcss.config.js:ro
      - frontend_node_modules:/app/node_modules  # Named volume for node_modules
      - frontend_build:/app/dist  # Named volume for Vite build output
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - emg-network
    restart: unless-stopped
    # Development server with hot reload
    command: npm run dev -- --host 0.0.0.0 --port 3000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis Cache Service
  redis:
    image: redis:7.2-alpine
    container_name: emg-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - emg-network
    environment:
      - REDIS_REPLICATION_MODE=master

  # Redis Insight (optional - Redis GUI)
  redis-insight:
    image: redis/redisinsight:latest
    container_name: emg-redis-insight-dev
    restart: unless-stopped
    ports:
      - "5540:5540"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - emg-network
    profiles:
      - redis-gui

# Networks
networks:
  emg-network:
    driver: bridge
    name: emg-dev-network

# Volumes
volumes:
  redis_data:
    name: emg_redis_data
  emg_data:
    name: emg_data
  backend_logs:
    name: emg_backend_logs
  backend_venv:
    name: emg_backend_venv
  backend_poetry_cache:
    name: emg_backend_poetry_cache
  frontend_node_modules:
    name: emg_frontend_node_modules
  frontend_build:
    name: emg_frontend_build