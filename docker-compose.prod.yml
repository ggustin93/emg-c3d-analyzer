# Production Docker Compose Configuration for Coolify
# EMG C3D Analyzer - Optimized for production deployment

services:
  # Backend API Service - Production Optimized
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: production
      # Backend uses Poetry - no NODE_ENV needed
    image: emg-analyzer-backend:${VERSION:-latest}
    container_name: emg-backend-prod
    environment:
      # Database configuration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      
      # Redis cache configuration  
      - REDIS_URL=redis://redis:6379/0
      - REDIS_CACHE_TTL_SECONDS=${REDIS_CACHE_TTL_SECONDS:-7200}
      - REDIS_MAX_CACHE_SIZE_MB=${REDIS_MAX_CACHE_SIZE_MB:-200}
      - REDIS_KEY_PREFIX=emg_analysis_prod
      
      # Application settings
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=${LOG_LEVEL:-WARNING}
      
      # File storage
      - DATA_BASE_DIR=/app/data
      - UPLOAD_DIR=/app/data/uploads
      - RESULTS_DIR=/app/data/results
      - CACHE_DIR=/app/data/cache
      
      # Security settings
      - ALLOWED_ORIGINS=${FRONTEND_URL}
      - SECRET_KEY=${SECRET_KEY}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      
      # Performance settings
      - WORKERS=${BACKEND_WORKERS:-2}
    volumes:
      - backend_data:/app/data
      - backend_logs:/app/logs
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - emg-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Web Application - Production Optimized
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      target: production
      args:
        - NODE_ENV=production
        - REACT_APP_API_URL=${BACKEND_URL:-http://backend:8080}
        - REACT_APP_SUPABASE_URL=${SUPABASE_URL}
        - REACT_APP_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
        - REACT_APP_ENVIRONMENT=production
        - REACT_APP_SENTRY_DSN=${SENTRY_DSN:-}
    image: emg-analyzer-frontend:${VERSION:-latest}
    container_name: emg-frontend-prod
    environment:
      # Backend API URL (internal container communication)
      - REACT_APP_API_URL=${BACKEND_URL:-http://backend:8080}
      - REACT_APP_ENVIRONMENT=production
      
      # Supabase configuration (for client-side)
      - REACT_APP_SUPABASE_URL=${SUPABASE_URL}
      - REACT_APP_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      
      # Analytics and monitoring
      - REACT_APP_SENTRY_DSN=${SENTRY_DSN:-}
    ports:
      - "${FRONTEND_PORT:-3000}:8080"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - emg-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Redis Cache Service - Production Configuration
  redis:
    image: redis:7.2-alpine
    container_name: emg-redis-prod
    restart: unless-stopped
    ports:
      - "6379"  # Internal only
    volumes:
      - redis_data:/data
      - ./redis.prod.conf:/usr/local/etc/redis/redis.conf:ro
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --maxmemory ${REDIS_MAX_MEMORY:-256mb}
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - emg-network
    deploy:
      resources:
        limits:
          memory: 300M
          cpus: '0.5'
        reservations:
          memory: 200M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Nginx Reverse Proxy with SSL termination
  nginx:
    image: nginx:1.25-alpine
    container_name: emg-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - emg-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  redis_data:
    driver: local
  backend_data:
    driver: local  
  backend_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  emg-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Coolify deployment labels
x-coolify-labels: &coolify-labels
  - "coolify.managed=true"
  - "coolify.version=${VERSION:-latest}"
  - "coolify.name=emg-c3d-analyzer"
  - "coolify.type=application"

# Usage for Coolify:
# 1. Set environment variables in Coolify dashboard
# 2. Deploy using: docker-compose -f docker-compose.prod.yml up -d
# 3. Coolify will manage SSL certificates, monitoring, and scaling