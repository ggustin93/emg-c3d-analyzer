# Development Docker Compose Configuration
# EMG C3D Analyzer - Full containerized development environment

services:
  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: production
    container_name: emg-backend-dev
    environment:
      # Database configuration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      
      # Redis cache configuration
      - REDIS_URL=redis://redis:6379/0
      - REDIS_CACHE_TTL_SECONDS=3600
      - REDIS_MAX_CACHE_SIZE_MB=100
      - REDIS_KEY_PREFIX=emg_analysis
      
      # Application settings
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=INFO
      
      # File storage
      - DATA_BASE_DIR=/app/data
      - UPLOAD_DIR=/app/data/uploads
      - RESULTS_DIR=/app/data/results
      - CACHE_DIR=/app/data/cache
      
      # CORS settings for development
      - ALLOWED_ORIGINS=http://localhost:3000,http://frontend:8080
    volumes:
      - backend_data:/app/data
      - backend_logs:/app/logs
    ports:
      - "8080:8080"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - emg-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend Web Application
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      target: production
      args:
        - REACT_APP_API_URL=http://localhost:8080
        - REACT_APP_SUPABASE_URL=${SUPABASE_URL}
        - REACT_APP_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    container_name: emg-frontend-dev
    environment:
      # Backend API URL
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_ENVIRONMENT=development
      
      # Supabase configuration (for client-side)
      - REACT_APP_SUPABASE_URL=${SUPABASE_URL}
      - REACT_APP_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    ports:
      - "3000:8080"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - emg-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis Cache Service
  redis:
    image: redis:7.2-alpine
    container_name: emg-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - emg-network
    environment:
      - REDIS_REPLICATION_MODE=master

  # Redis Insight (optional - Redis GUI)
  redis-insight:
    image: redis/redisinsight:latest
    container_name: emg-redis-insight-dev
    restart: unless-stopped
    ports:
      - "5540:5540"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - emg-network
    profiles:
      - redis-gui

  # Nginx Reverse Proxy (optional for unified access)
  nginx:
    image: nginx:1.25-alpine
    container_name: emg-nginx-dev
    ports:
      - "80:80"
    volumes:
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - emg-network
    profiles:
      - reverse-proxy
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  backend_data:
    driver: local
  backend_logs:
    driver: local

networks:
  emg-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Usage:
# Development: docker-compose up -d
# With Redis GUI: docker-compose --profile redis-gui up -d  
# With reverse proxy: docker-compose --profile reverse-proxy up -d
# Full setup: docker-compose --profile redis-gui --profile reverse-proxy up -d