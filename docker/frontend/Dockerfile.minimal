# syntax=docker/dockerfile:1

# =============================================================================
# Stage 1: Build the React Application (Vite) - Minimal Alpine Fix
# =============================================================================
FROM node:20-alpine AS builder

# Set build arguments
ARG NODE_ENV=production
ARG REACT_APP_API_URL
ARG REACT_APP_SUPABASE_URL
ARG REACT_APP_SUPABASE_ANON_KEY

# Set build environment variables
ENV NODE_ENV=${NODE_ENV} \
    NODE_OPTIONS="--max-old-space-size=2048" \
    REACT_APP_API_URL=${REACT_APP_API_URL} \
    REACT_APP_SUPABASE_URL=${REACT_APP_SUPABASE_URL} \
    REACT_APP_SUPABASE_ANON_KEY=${REACT_APP_SUPABASE_ANON_KEY}

# Install essential build tools for Alpine
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    libc6-compat

# Set working directory
WORKDIR /app

# Copy package files first for better caching
COPY frontend/package.json frontend/package-lock.json ./

# Install dependencies with proper npm configuration for Alpine
RUN --mount=type=cache,target=/root/.npm \
    npm config set unsafe-perm true && \
    npm config set fetch-retry-maxtimeout 120000 && \
    npm ci --prefer-offline --no-audit --no-optional

# Copy frontend source code
COPY frontend/ .

# Explicit build steps with error handling
RUN set -e && \
    echo "Checking TypeScript installation..." && \
    npx tsc --version && \
    echo "Running TypeScript compilation..." && \
    npx tsc --noEmit && \
    echo "Running Vite build..." && \
    npx vite build && \
    echo "Verifying build output..." && \
    ls -la dist/

# =============================================================================
# Stage 2: Production Web Server
# =============================================================================
FROM nginx:1.25-alpine AS production

# Install curl for health checks
RUN apk add --no-cache curl

# Remove default nginx config and static files
RUN rm -rf /usr/share/nginx/html/* /etc/nginx/conf.d/default.conf

# Copy custom nginx configuration
COPY frontend/nginx.conf /etc/nginx/nginx.conf

# Copy built application from builder stage
COPY --from=builder --chown=nginx:nginx /app/dist /usr/share/nginx/html

# Verify copy succeeded
RUN ls -la /usr/share/nginx/html/ && \
    test -f /usr/share/nginx/html/index.html || (echo "Build output not found!" && exit 1)

# Create necessary directories with proper permissions
RUN mkdir -p /var/cache/nginx /var/log/nginx /var/run \
    && chown -R nginx:nginx /var/cache/nginx /var/log/nginx /var/run

# Switch to non-root user
USER nginx

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose port
EXPOSE 8080

# Start nginx
CMD ["nginx", "-g", "daemon off;"]