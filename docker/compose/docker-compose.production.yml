# ══════════════════════════════════════════════════════════════════════════════
# EMG C3D Analyzer - Production Environment (VUB Self-Hosted Coolify)
# ══════════════════════════════════════════════════════════════════════════════
#
# Purpose: Production deployment with full optimizations and monitoring
# Deployment: VUB machines via self-hosted Coolify
# Services: Backend API, Frontend UI, Nginx, Redis (optional), Metabase (optional)
# Usage: Deploy via self-hosted Coolify dashboard
#
# Features:
#   - SSL termination via Nginx
#   - Production-grade resource limits
#   - Health monitoring and auto-restart
#   - Optional Redis clustering and Metabase analytics
#   - Support for both cloud and self-hosted Supabase
#
# ══════════════════════════════════════════════════════════════════════════════

services:
  # ═══════════════════════════════════════════════════════════════════════════
  # Core Services (Always Active)
  # ═══════════════════════════════════════════════════════════════════════════

  # Backend API Service - Production Optimized
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: production
      args:
        - BUILDKIT_INLINE_CACHE=1
        - TARGETPLATFORM=${TARGETPLATFORM:-linux/amd64}
    image: emg-backend:production-${VERSION:-latest}
    container_name: emg-backend-prod
    environment:
      # Environment
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=${LOG_LEVEL:-WARNING}
      
      # Supabase configuration (Cloud or Self-Hosted)
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      
      # Optional Redis configuration
      - ENABLE_REDIS=${ENABLE_REDIS:-true}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - REDIS_CACHE_TTL_SECONDS=${REDIS_CACHE_TTL_SECONDS:-7200}
      - REDIS_MAX_CACHE_SIZE_MB=${REDIS_MAX_CACHE_SIZE_MB:-200}
      - REDIS_KEY_PREFIX=emg_production
      
      # File storage
      - DATA_BASE_DIR=/app/data
      - UPLOAD_DIR=/app/data/uploads
      - RESULTS_DIR=/app/data/results
      - CACHE_DIR=/app/data/cache
      
      # Security
      - SECRET_KEY=${SECRET_KEY}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - ALLOWED_ORIGINS=${FRONTEND_URL}
      
      # Coolify built-in variables
      - SOURCE_COMMIT=${SOURCE_COMMIT:-unknown}
      - COOLIFY_BRANCH=${COOLIFY_BRANCH:-main}
      
      # Performance
      - WORKERS=${BACKEND_WORKERS:-4}
    volumes:
      - backend_data:/app/data
      - backend_logs:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    networks:
      - emg-network
    labels:
      - "coolify.managed=true"
      - "coolify.service=backend"
      - "coolify.port=8080"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Frontend Web Application - Production Optimized
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      target: production
      platforms:
        - linux/amd64
        - linux/arm64
      args:
        - VITE_API_URL=${VITE_API_URL:-http://localhost:8080}
        - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
        - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
        - VITE_ENVIRONMENT=production
        - VITE_SENTRY_DSN=${SENTRY_DSN:-}
        - BUILDKIT_INLINE_CACHE=1
        - TARGETPLATFORM=${TARGETPLATFORM:-linux/amd64}
    image: emg-frontend:production-${VERSION:-latest}
    container_name: emg-frontend-prod
    environment:
      - VITE_API_URL=${VITE_API_URL:-http://localhost:8080}
      - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
      - VITE_ENVIRONMENT=production
      - VITE_SENTRY_DSN=${SENTRY_DSN:-}
    ports:
      - "3000:8080"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - emg-network
    labels:
      - "coolify.managed=true"
      - "coolify.service=frontend"
      - "coolify.port=8080"
      - "coolify.public=true"  # Public entry point
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"


  # ═══════════════════════════════════════════════════════════════════════════
  # Optional Services (Uncomment to Enable)
  # ═══════════════════════════════════════════════════════════════════════════

  # Redis Cache Service - Production Configuration (Enable with --profile redis or set profiles in Coolify)
  redis:
    profiles: [redis]  # Only starts when profile is enabled
    image: redis:7.2-alpine
    container_name: emg-redis-prod
    restart: unless-stopped
    ports:
      - "6379"  # Internal only
    command: >
      redis-server
      --maxmemory ${REDIS_MAX_MEMORY:-512mb}
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
      - ./redis/redis.prod.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - emg-network
    deploy:
      resources:
        limits:
          memory: 600M
          cpus: '1.0'
        reservations:
          memory: 400M
          cpus: '0.5'
    labels:
      - "coolify.managed=true"
      - "coolify.service=redis"
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ═══════════════════════════════════════════════════════════════════════════
  # Metabase Analytics Platform - Production (Uncomment to enable)
  # ═══════════════════════════════════════════════════════════════════════════
  
  # metabase:
  #   image: metabase/metabase:v0.48.0
  #   container_name: emg-metabase-prod
  #   restart: unless-stopped
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     # Metabase Application Database
  #     MB_DB_TYPE: postgres
  #     MB_DB_DBNAME: metabase_production
  #     MB_DB_PORT: 5432
  #     MB_DB_USER: ${METABASE_DB_USER:-metabase}
  #     MB_DB_PASS: ${METABASE_DB_PASS}
  #     MB_DB_HOST: metabase-postgres
  #     # Performance (Production)
  #     JAVA_OPTS: "-Xmx2g -XX:+UseG1GC -XX:G1HeapRegionSize=32m"
  #     # Configuration
  #     MB_SITE_NAME: "EMG Production Analytics"
  #     MB_ANON_TRACKING_ENABLED: false
  #     MB_ENABLE_PUBLIC_SHARING: false  # More restrictive in production
  #     MB_ENABLE_EMBEDDING: true
  #     # Security
  #     MB_ENCRYPTION_SECRET_KEY: ${MB_ENCRYPTION_SECRET_KEY}
  #   volumes:
  #     - metabase_data:/metabase-data
  #     - /dev/urandom:/dev/random:ro
  #   depends_on:
  #     metabase-postgres:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
  #     interval: 60s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 90s
  #   networks:
  #     - emg-network
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 3G
  #         cpus: '2.0'
  #       reservations:
  #         memory: 2G
  #         cpus: '1.0'
  #   labels:
  #     - "coolify.managed=true"
  #     - "coolify.service=metabase"
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "10m"
  #       max-file: "5"

  # metabase-postgres:
  #   image: postgres:15-alpine
  #   container_name: emg-metabase-postgres-prod
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: metabase_production
  #     POSTGRES_USER: ${METABASE_DB_USER:-metabase}
  #     POSTGRES_PASSWORD: ${METABASE_DB_PASS}
  #     POSTGRES_INITDB_ARGS: "--encoding=UTF8"
  #   volumes:
  #     - metabase_postgres_data:/var/lib/postgresql/data
  #     - ./postgres/backup:/backup  # For backups
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${METABASE_DB_USER:-metabase}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - emg-network
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 1G
  #         cpus: '1.0'
  #       reservations:
  #         memory: 512M
  #         cpus: '0.5'

  # ═══════════════════════════════════════════════════════════════════════════
  # Self-Hosted Supabase Stack (Alternative to Cloud - Uncomment if needed)
  # ═══════════════════════════════════════════════════════════════════════════
  
  # Note: Only enable if SUPABASE_MODE=selfhosted in .env
  # Full production configuration with all services
  
  # postgres-supabase:
  #   image: supabase/postgres:15.1.0.117
  #   container_name: supabase-postgres-prod
  #   restart: unless-stopped
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: postgres
  #     JWT_SECRET: ${JWT_SECRET}
  #   volumes:
  #     - supabase_postgres_data:/var/lib/postgresql/data
  #     - supabase_postgres_config:/etc/postgresql
  #     - ./postgres/backup:/backup  # For backups
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 4G
  #         cpus: '4.0'
  #       reservations:
  #         memory: 2G
  #         cpus: '2.0'
  #   # ... (see selfhosted.yml for complete configuration)
  
  # postgrest:
  #   image: postgrest/postgrest:v11.2.0
  #   # ... (see selfhosted.yml for complete configuration)
  
  # gotrue:
  #   image: supabase/gotrue:v2.132.3
  #   # ... (see selfhosted.yml for complete configuration)
  
  # realtime:
  #   image: supabase/realtime:v2.25.50
  #   # ... (see selfhosted.yml for complete configuration)
  
  # storage:
  #   image: supabase/storage-api:v0.43.11
  #   # ... (see selfhosted.yml for complete configuration)
  
  # kong:
  #   image: kong:3.4
  #   # ... (see selfhosted.yml for complete configuration)

volumes:
  backend_data:
    driver: local
  backend_logs:
    driver: local
  redis_data:  # Available when Redis profile is enabled
    driver: local
  # metabase_data:  # Uncomment if using Metabase
  #   driver: local
  # metabase_postgres_data:  # Uncomment if using Metabase
  #   driver: local
  # supabase_postgres_data:  # Uncomment if self-hosting Supabase
  #   driver: local
  # supabase_postgres_config:  # Uncomment if self-hosting Supabase
  #   driver: local

networks:
  emg-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.0.0/16

# ═══════════════════════════════════════════════════════════════════════════
# Environment Variables (.env.production)
# ═══════════════════════════════════════════════════════════════════════════
#
# ENVIRONMENT=production
# VERSION=1.0.0
#
# # Service Toggles
# ENABLE_REDIS=true
# ENABLE_METABASE=true
# SUPABASE_MODE=cloud  # cloud or selfhosted
#
# # Supabase Cloud (default)
# SUPABASE_URL=https://xxx.supabase.co
# SUPABASE_ANON_KEY=xxx
# SUPABASE_SERVICE_KEY=xxx
#
# # Supabase Self-Hosted (if SUPABASE_MODE=selfhosted)
# POSTGRES_PASSWORD=super-secure-password
# JWT_SECRET=your-jwt-secret-min-32-chars
# ANON_KEY=your-anon-key
# SERVICE_KEY=your-service-key
#
# # Frontend
# VITE_API_URL=https://api.yourdomain.com
# FRONTEND_URL=https://app.yourdomain.com
# VITE_SUPABASE_URL=${SUPABASE_URL}
# VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
#
# # Security
# SECRET_KEY=your-production-secret-key
# WEBHOOK_SECRET=your-webhook-secret
# MB_ENCRYPTION_SECRET_KEY=your-metabase-encryption-key
#
# # Performance
# BACKEND_WORKERS=4
# REDIS_MAX_MEMORY=512mb
# REDIS_PASSWORD=redis-secure-password
#
# # Metabase
# METABASE_DB_USER=metabase
# METABASE_DB_PASS=metabase-secure-password
#
# # Monitoring (optional)
# SENTRY_DSN=https://xxx@sentry.io/xxx
#
# ═══════════════════════════════════════════════════════════════════════════